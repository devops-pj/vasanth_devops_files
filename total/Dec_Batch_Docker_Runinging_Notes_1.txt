

15-02-2020 7:00 PM
==================
Docker 

Containarization Platfrom using which we can package our applications(code) & required softwares to run application in the form of
containers.

Build Once Run AnyWhere(Physical Machine,Virtural Machine,Cloud).

Docker has two editions:

Docker CE --> Community Edition(Open Source)
 
Docker EE --> Enterprise Edition(Commerical)

Components/Terminology:
=======================
Docker Image
Docker Container
Docker Registry(Repository)
  Public --> hub.docker.com (Public Accessable from anywhere)
  Private --> Can be accessable with in private network(Nexus,JFrog)
Dockerfile



docker build -t   <repoDetails>/<appName>:<version> . 

ex: 
# docker hub dockerhandson is username of my repo.Replace dockerhandson with your user name.
docker build -t dockrhandson/java-web-app:1 .
 
# Image tagged with rivate repo  
docker build -t 189.98.72.182:8081/java-web-app:1 .
	
# Authenticate with Repo
#Public Repo(docker hub)	
docker login -u <username> -p <password>

ex:

docker login -u dockerhandson -p password

#Private Repo
docker login -u <username> -p <password> <URL>	

docker login -u admin -p password 189.98.72.182:8081

# Docker push

docker push <repoDetails>/<appName>:<version>

# Image tagged with Public  Repo
docker push  dockrhandson/java-web-app:1

# Image tagged with Privare Repo
docker push 189.98.72.182:8081/java-web-app:1

	
docker run -d -p <hostPort>:<containerPort> --name <containerName> <imageName>

ex: 
docker run -d -p 8080:8080 --name javawebappcontainer dockerhandson/java-web-app:1
	

16-02-2020 6:00 AM
==================

docker version
docker --version
docker info

Image Commands:
==============
Docker Image:  It's package which will have all the required components like application                code & softwares which are required to run application. 

Base Images :  Software images which contains some software.Like  			 			                ubuntu,centos,tomcat,mysql,jenkins ..etc.
               
			   

Custom Images: We can create our own image using docker file on top of base image which  			   can have application code + Softwares.


Create a simple docker image from nginx

# Create one index.html
vi index.html
 
#Create Dockerfile(Default Name)

FROM nginx
COPY index.html /usr/share/nginx/html


docker build -t <repodetails/appName:version> .

Ex:
docker build -t dockerhandson/testnginx .

#Tag image with private Repo

docker build -t 189.81.23.41:8081/testnginx .

# List images in the docker machine
docker images (or)  docker image ls


# Authenticat with Repo

# With public repo
docker login -u <userName> -p <password>

ex:
docker login -u username -p password

# With Private Rep
docker login -u <userName>. -p <password>.   <RepoURL>

ex:
docker login -u admin -p password 189.81.23.41:8081

# Push image to repo
docker push <repodetails/appName:version>

ex:
docker push dockerhandson/testnginx

# Download Image From Repo
docker pull <ImageId/Name>

#Delete Image from docker machine
docker rmi <ImageName/ImageID>

ex:
docker rmi dockerhandson/testnginx:latest

docker rmi <ImageName/ImageID> <ImageName/ImageID>

Delete all images
=================
docker rmi -f $(docker images -q)

# It will also delete all unsued images
docker image prune

# It will delete all stopped containers ,all unused images,un used networks.
docker system prune

# Get more details about an image
docker image inspect <imageId/ImageName>
docker inspect <imageId/ImageName>

# Get Layers of an image
docker history <imageId/ImageName>


How can we move image from one system to another system with out repo?

1) # Save image as a tar file in source system where u have a image.
docker save <imageName> - o <FileName>.tar

2) SCP image tar file from source system to destination system
scp <FileName>.tar username@DestionationIP

3) In destination server execute docker load to load image from tar file.

docker load -i <FileName>.tar






docker build
docker push
docker login
docker images or docker image ls
docker images -q
docker rmi <imageId/Name>
docker rmi -f <imageId/Name>  <imageId/Name>
docker rmi -f $(docker images -q)
docker image prune
docker system prune
docker image inspect <imageId/Name>
docker inspect <imageId/Name>
docker history <imageId/Name>
docker search <imageName>
docker save
docker load


Contanier Commands
==================

# It will create container from the image but it will not start the container.

docker create --name <contaierName> - p <hostPort>:<containerPort> <imageName>


# It will create  & Start container from the image.
docker run -d --name <contaierName> - p <hostPort>:<containerPort> <imageName>

ex: 
docker run -d -p 80:80 --name nginxcontianer dockerhandson/testnginx

# List Running Containers
docker ps or docker container ls 

# List All Containers Running+Stopped
docker ps -a or docker container ls -a
docker ps --all or docker container ls --all

# List Only Stopped Contianers
docker ps -a --filter "status=exited"

# Inspect Container

docker container inspect <containerId/Name>
docker inspect <containerId/Name>

# Start Container
docker start <containerId/Name>

# Stop Container
docker stop <containerId/Name>

# Restart Container
docker restart <containerId/Name>

# Pause Container(It will pause container process)
docker pause <containerId/Name>

# Un Pause Container
docker unpause <containerId/Name>

Q) How can we copy files from HostSystem to Container or Container to HostSystem?

# Container to system
docker cp <containerName>:/<ContainerFilePath>  <SystemFileName>

# System to Cotnainer
docker cp <SourceFile/SystemFilePath> <containerName>:/<ContainerFilePath>

How can we troubleshoot or debug applications which are running as a conainers?

# It will disply Standard Out ,Standard Error Of Container terminal.
docker logs <containerName/Id>
docker logs --tail <NoLines> <containerName/Id>
docker logs -f <containerName/Id>


# It will display Memory/CPU Usage of a cotainer. 
docker stats <containerName/Id>
# It will process detials which is runing inside a container
docker top <containerName/Id>

# We can execute commands inside container
docker exec <ContainerID/Name> <Command>
ex:
  docker exec javawebapp pwd
  docker exec javawebapp ps
  
  docker exec javawebapp cat /etc/*releases
 
Q) How can we login or go inside into to container?

 docker exec -it <containerName/ID>  /bin/bash
 
 docker exec -it <containerName/ID>  bash
 
 docker exec -it <containerName/ID>  sh
 
# It will attach container process(terminal) to the host     	system  
docker attach <containerName/ID>


# We can create a image from the container.
docker commit <containerID/Name> <imageName>


# Remove Containers

# Below command can remove container if container is in stopped/exited state.
docker rm <containerID/Name>

# Below command can remove runinging container(Force Remove).
docker rm -f  <containerID/Name>

# How to remove all stopped containers
docker container prune
docker rm $(docker ps -aq --filter "status=exited")

# Remove Paused Containers
docker rm -f $(docker ps -aq --filter "status=paused")

# Remove Paused Containers
docker rm -f $(docker ps -aq --filter "status=paused")

# Remove All Containers
docker rm -f $(docker ps -aq)


# Who can we delete containers which are created from specific image?

docker ps -a|awk '$2=="<imageNameWithVersion>" {print  $1}' |xargs docker rm -f

Ex:

docker ps -a|awk '$2=="dockerhandson/java-web-app" {print  $1}' |xargs docker rm -f


Next Will Cover below topics
Dockerfile
Docker Volumes
Docker Networks
Docker Compose
Docker Swarm














































	








